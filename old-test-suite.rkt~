#lang racket
(require rackunit)
(require "interp.rkt")
(require "typechecker.rkt")

(check-eqv? (value-of-exp '(+ 1 2) empty-env '()) 3)
(check-eqv? (value-of-exp `((位 (x : N) x) 2) empty-env '()) 2)
(check-eqv? (value-of-exp `((位 (x : B) (if (zero? x) #t #f)) 0) empty-env '()) #t)
(check-eqv? (value-of-exp `(let ((x 6)
                                  (y 7)
                                  (z 12))
                              (+ (+ x y) z)) empty-env (empty-global-table)) 25)
;;misc. tests
(check-eqv? (value-of-exp `(if #t 1 2) empty-env (empty-global-table)) 1)
(check-eqv? (value-of-exp `((位 (x : N y : N) (+ x y)) 2 3) empty-env '()) 5)
(check-eqv? (value-of-exp `((位 (a : N b : N c : N d : N) (+ b (+ a (+ c d))) ) 2 3 4 5) empty-env '()) 14)
